<p>a) 79, 67, 84, 21, 75, 83, 92, 10, 55, 79</p><p>and 79, 84, 67, 92, 83, 75, 21, 79, 55, 10</p><p>b) The time complexity to find a node is O(log n). This is because the tree is balanced such that the leaf nodes have depths not more than one apart from one another, leading to a roughly even split between the numbers that exist in the left branch and the numbers that exist in the right branch of each node. Hence, traversing through the tree will cause the search area to be half after traversing through each node. Thus, the time complexity is O(log n).</p><p>c) Given an entirely random set of nodes inserted, the nodes will eventually tend to be inserted in specific branches more than others, and leading to the depth of the leaf nodes to be vastly different to one another. Hence, traversing through find one node located at a very high depth will take longer than O(log n) and at a worst case scenario, be closer to O(n) if all the nodes are inserted to one branch only.</p><p>d) 10, 55, 21, 75, 67, 79, 83, 92, 84, 79</p>