class Node :
    def __init__(self, data):
        self.data = data
        self.next = None
    def __repr__(self):
        return f"{self.data}"
class LinkedList :
    def __init__(self):
        self.start = None
    def is_empty(self) :
        return self.start == None
    def insert_front(self, data) :
        new_node = Node(data)
        if self.is_empty() :
            self.start = new_node
            new_node.next = None
        else :
            new_node.next = self.start
            self.start = new_node
    def remove_front(self):
        if self.is_empty() :
            return None
        ret = self.start
        self.start = ret.next
        return ret
    def __repr__(self):
        if self.is_empty():
            return "[]"
        ret = []
        tmp = self.start
        while tmp :
            ret.append(str(tmp))
            tmp = tmp.next
        ret = ",".join(ret)
        return f"[{ret}]"
		
		
# task 1.2
class stack :
    def __init__(self):
        self.top = LinkedList()
    def push(self, item):
        self.top.insert_front(item)
    def pop(self):
        return self.top.remove_front()
    def peek(self):
        ret = self.top.remove_front() # we need the top element first
        self.top.insert_front(ret.data) # we need to insert it back into the top (we are only peeking)
        return ret
    def is_empty(self):
        return self.top.is_empty()
    def __repr__(self):
        print(self.top)
		
# task 1.3
# test case

#valid
test_stack = stack()
test_stack.push(1)
test_stack.push(2)
test_stack.pop()
test_stack.peek()
print(test_stack.peek().data)

#boundary
test_stack = stack()
test_stack.push(None)


# task 1.4
class Queue :
    def __init__(self):
        self.queue = stack()
    def enqueue(self, item):
        if self.queue.is_empty():
            self.queue.push(item)
        else :
            tmp= []
            while self.queue.peek() != None :
                tmp.append(self.queue.pop())
            tmp = tmp[::-1]
            self.queue.push(item)
            for i in tmp :
                self.queue.push(item)
    def dequeue(self):
        return self.queue.pop()
    def __repr__(self):
        return self.queue
		


# task 2.1
arrivals = pd.read_csv("ARRIVALS.TXT", names = "StopSequence,Direction,BusStopCode,Distance,ArrivalTime".split(','), skiprows=1)
arrivals['ArrivalTime'] = pd.to_datetime(arrivals['ArrivalTime'], format="%H%M")

BusStops = arrivals.groupby('Direction')['BusStopCode'].unique().to_dict()
for Direction in BusStops :
    BusStops[Direction] = BusStops[Direction].tolist()

# task 2.2

import pandas as pd
import datetime

arrivals = pd.read_csv("ARRIVALS.TXT", names = "StopSequence,Direction,BusStopCode,Distance,ArrivalTime".split(','), skiprows=1)
arrivals['ArrivalTime'] = pd.to_datetime(arrivals['ArrivalTime'], format="%H%M")

max_min = arrivals.groupby('Direction')['ArrivalTime'].agg([min, max])
max_min['Total'] = max_min['max']-max_min['min']

max_min[['min', 'max', 'Total']] = [max_min['min'].]




# task 3.1
def qsort(words:list):
    if len(words) < 2:
        return words
    left = []
    right = []
    middle = []
    pivot = words[0][0]
    for word in words :
        if word[0] < pivot :
            left.append(word)
        elif word[0] > pivot :
            right.append(word)
        else :
            middle.append(word)
    return qsort(left)+middle+qsort(right)

qsort([("O"), ("A"), ("M")])


# task 3.2
import csv
#valid
with open("WORDS.txt") as f:
    file = f.readlines()
test_1 = [(word.strip('\n'), 2) for word in file[:5]]
test_2 = [(word.strip('\n'), 3) for word in file[5:10]]
test_3 = [(word.strip('\n'), 4) for word in file[10:15]]
print(test_1)
print(qsort(test_1))
print(test_2)
print(qsort(test_2))
print(test_3)
print(qsort(test_3))
print("\n\n")
#invalid
test_4 = [[(word.strip('\n'), 4) for word in file] for i in range(10)]
print(test_4)
print(qsort(test_4))


# task 3.3

import pandas as pd

def merge(A,B):
    ret = []
    while len(A) and len(B):
        if A[0][0]>B[0][0]:
            ret.append(A.pop(0))
        else :
            ret.append(B.pop(0))
    return ret+A+B
def merge_lists(arr): # array is list of lists
    if len(arr)<2:
        return arr
    idx = 0
    while len(arr) != 1:
        arr[0] = merge(arr[0],arr[1])
        arr.pop(1)
    return arr
words = pd.read_csv("WORDS.TXT", names=['Word'])
words = pd.Series(words['Word']).tolist()
words = [(str(words[idx]), idx) for idx in range(len(words))]

sorted_partial = []
while len(words) >= 3000:
    sorted_tmp = qsort(words[:3000])
    sorted_partial.append(sorted_tmp)
    words = words[3000:]
sorted_partial.append(words)
sorted_all = merge_lists(sorted_partial[:30])


